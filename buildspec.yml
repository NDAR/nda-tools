version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8

  build:
    on-failure: ABORT
    commands:
      - pip install --upgrade pip
      - pip install setuptools wheel twine build
      - pip install keyrings.alt
      - pip install -e '.[test]'
      - coverage run -m pytest && coverage report -m
      - |
        if [ -n "$PYPI_USER" ]; then
          echo "building project ...."
          python -m build
          # set repository to testpypi if env variable TEST_PYPI is set
          if [ -n "$PYPI_PASSWORD" ]; then
            echo "Pushing to PyPI"
            twine upload dist/* -u $PYPI_USER -p $PYPI_PASSWORD
          elif [ -n "$TESTPYPI_PASSWORD" ]; then
            echo "Pushing to Test PyPI"
            twine upload dist/* -u $PYPI_USER -p $TESTPYPI_PASSWORD --repository-url https://test.pypi.org/legacy/        
          else
            echo "PYPI_PASSWORD not set"
            exit 1
          fi
        else
          echo "SKIPPING PUSH TO PYPI"
        fi
      - |
        if [ -n "$GITHUB_REPO" ]; then 
          echo "Setting up SSH key"
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" | tr "\t" "\n" > ~/.ssh/id_rsa
          chmod 400 ~/.ssh/id_rsa
          s3_url=$(echo "$CODEBUILD_SOURCE_VERSION" | sed 's|arn:aws:s3:::|s3://|g')
          echo "s3_url: $s3_url"
          branch_name=$(aws s3 cp $s3_url - | jq '.BranchName' | sed 's|"||g')
          echo "branch_name: $branch_name"
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git remote set-url --push origin $GITHUB_REPO
          ssh -i ~/.ssh/id_rsa -T git@github.com
          git checkout $branch_name
          echo "pushing $branch_name"
          git push origin "$branch_name"
          if [ "$ENV" = "prod" ]; then
            echo "Extract the version number"
            versionPattern="__version__ = '([0-9]+\.[0-9]+\.[0-9]+)'"
            initFileContent=$(cat NDATools/__init__.py)
            versionNumber=$(echo "$initFileContent" | grep -Po "$versionPattern" | cut -d"'" -f2)
            if [ -n "$versionNumber" ]; then
              echo "Tagging version: $versionNumber"
              gitTag="$versionNumber"
              git tag "$gitTag"
              git push --tags
            else
              echo "Version number not found in __init__.py"
              exit 1
            fi 
          fi
        else
          echo "SKIPPING PUSH TO GITHUB"
        fi
  post_build:
    commands:
      - echo $CODEBUILD_RESOLVED_SOURCE_VERSION

artifacts:
  files:
    - dist/*
